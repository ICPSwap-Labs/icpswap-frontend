export const idlFactory = ({ IDL }: any) => {
  const NatResult = IDL.Variant({ ok: IDL.Nat, err: IDL.Text });
  const PublicPoolOverView = IDL.Record({
    id: IDL.Nat,
    token0Id: IDL.Text,
    token1Id: IDL.Text,
    totalVolumeUSD: IDL.Float64,
    sqrtPrice: IDL.Float64,
    tvlToken0: IDL.Float64,
    tvlToken1: IDL.Float64,
    pool: IDL.Text,
    tick: IDL.Int,
    liquidity: IDL.Nat,
    token1Price: IDL.Float64,
    feeTier: IDL.Nat,
    volumeUSD: IDL.Float64,
    token1Standard: IDL.Text,
    tvlUSD: IDL.Float64,
    volumeUSDWeek: IDL.Float64,
    txCount: IDL.Nat,
    token1Decimals: IDL.Float64,
    token0Standard: IDL.Text,
    token0Symbol: IDL.Text,
    volumeUSDChange: IDL.Float64,
    tvlUSDChange: IDL.Float64,
    token0Decimals: IDL.Float64,
    token0Price: IDL.Float64,
    token1Symbol: IDL.Text,
    volumeUSDWeekChange: IDL.Float64,
  });
  const _TransactionType = IDL.Variant({
    fee: IDL.Null,
    burn: IDL.Null,
    claim: IDL.Null,
    mint: IDL.Null,
    swap: IDL.Null,
    addLiquidity: IDL.Null,
    removeLiquidity: IDL.Null,
    refreshIncome: IDL.Null,
    transfer: IDL.Null,
    collect: IDL.Null,
  });
  const TransactionsType = IDL.Record({
    to: IDL.Text,
    action: _TransactionType,
    token0Id: IDL.Text,
    token1Id: IDL.Text,
    liquidityTotal: IDL.Nat,
    from: IDL.Text,
    exchangePrice: IDL.Float64,
    hash: IDL.Text,
    tick: IDL.Int,
    token1Price: IDL.Float64,
    recipient: IDL.Text,
    token0ChangeAmount: IDL.Float64,
    sender: IDL.Text,
    exchangeRate: IDL.Float64,
    liquidityChange: IDL.Nat,
    token1Standard: IDL.Text,
    token0Fee: IDL.Float64,
    token1Fee: IDL.Float64,
    timestamp: IDL.Int,
    token1ChangeAmount: IDL.Float64,
    token1Decimals: IDL.Float64,
    token0Standard: IDL.Text,
    amountUSD: IDL.Float64,
    amountToken0: IDL.Float64,
    amountToken1: IDL.Float64,
    poolFee: IDL.Nat,
    token0Symbol: IDL.Text,
    token0Decimals: IDL.Float64,
    token0Price: IDL.Float64,
    token1Symbol: IDL.Text,
    poolId: IDL.Text,
  });
  const PublicSwapChartDayData = IDL.Record({
    id: IDL.Int,
    feeUSD: IDL.Float64,
    volumeUSD: IDL.Float64,
    tvlUSD: IDL.Float64,
    timestamp: IDL.Int,
    txCount: IDL.Int,
  });
  return IDL.Service({
    cycleAvailable: IDL.Func([], [NatResult], []),
    cycleBalance: IDL.Func([], [NatResult], []),
    getAllPools: IDL.Func([IDL.Opt(IDL.Nat)], [IDL.Vec(PublicPoolOverView)], ["query"]),
    getAllTransactions: IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(TransactionsType)], ["query"]),
    getPool: IDL.Func([IDL.Text], [PublicPoolOverView], ["query"]),
    getPoolChartData: IDL.Func([IDL.Text, IDL.Nat, IDL.Nat], [IDL.Vec(PublicSwapChartDayData)], ["query"]),
    getPoolTransactions: IDL.Func([IDL.Text, IDL.Nat, IDL.Nat], [IDL.Vec(TransactionsType)], ["query"]),
    getRollIndex: IDL.Func([], [IDL.Nat], ["query"]),
    getTvlRecord: IDL.Func([], [IDL.Text], []),
    reset: IDL.Func([], [], []),
    resetNowTimeTVL: IDL.Func([], [], []),
    rollBackData: IDL.Func([IDL.Vec(TransactionsType)], [], []),
    saveTransactions: IDL.Func([TransactionsType, IDL.Bool], [], []),
  });
};
