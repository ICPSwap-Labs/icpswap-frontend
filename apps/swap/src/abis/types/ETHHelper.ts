/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EthHelperInterface extends utils.Interface {
  functions: {
    "depositErc20(address,uint256,bytes32,bytes32)": FunctionFragment;
    "depositEth(bytes32,bytes32)": FunctionFragment;
    "getMinterAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "depositErc20" | "depositEth" | "getMinterAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositErc20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinterAddress",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedEthOrErc20(address,address,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedEthOrErc20"): EventFragment;
}

export interface ReceivedEthOrErc20EventObject {
  erc20ContractAddress: string;
  owner: string;
  amount: BigNumber;
  principal: string;
  subaccount: string;
}
export type ReceivedEthOrErc20Event = TypedEvent<
  [string, string, BigNumber, string, string],
  ReceivedEthOrErc20EventObject
>;

export type ReceivedEthOrErc20EventFilter =
  TypedEventFilter<ReceivedEthOrErc20Event>;

export interface EthHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositErc20(
      erc20Address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMinterAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  depositErc20(
    erc20Address: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BytesLike>,
    subaccount: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    principal: PromiseOrValue<BytesLike>,
    subaccount: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMinterAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    depositErc20(
      erc20Address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinterAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ReceivedEthOrErc20(address,address,uint256,bytes32,bytes32)"(
      erc20ContractAddress?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      principal?: PromiseOrValue<BytesLike> | null,
      subaccount?: null
    ): ReceivedEthOrErc20EventFilter;
    ReceivedEthOrErc20(
      erc20ContractAddress?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      principal?: PromiseOrValue<BytesLike> | null,
      subaccount?: null
    ): ReceivedEthOrErc20EventFilter;
  };

  estimateGas: {
    depositErc20(
      erc20Address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEth(
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMinterAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositErc20(
      erc20Address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      principal: PromiseOrValue<BytesLike>,
      subaccount: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMinterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
