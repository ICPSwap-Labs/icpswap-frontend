/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ERC20HelperInterface extends utils.Interface {
  functions: {
    "deposit(address,uint256,bytes32)": FunctionFragment;
    "getMinterAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deposit" | "getMinterAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinterAddress",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedErc20(address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedErc20"): EventFragment;
}

export interface ReceivedErc20EventObject {
  erc20_contract_address: string;
  owner: string;
  amount: BigNumber;
  principal: string;
}
export type ReceivedErc20Event = TypedEvent<
  [string, string, BigNumber, string],
  ReceivedErc20EventObject
>;

export type ReceivedErc20EventFilter = TypedEventFilter<ReceivedErc20Event>;

export interface ERC20Helper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20HelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      erc20_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMinterAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  deposit(
    erc20_address: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMinterAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deposit(
      erc20_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinterAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ReceivedErc20(address,address,uint256,bytes32)"(
      erc20_contract_address?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      principal?: PromiseOrValue<BytesLike> | null
    ): ReceivedErc20EventFilter;
    ReceivedErc20(
      erc20_contract_address?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      principal?: PromiseOrValue<BytesLike> | null
    ): ReceivedErc20EventFilter;
  };

  estimateGas: {
    deposit(
      erc20_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMinterAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      erc20_address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMinterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
