/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface CkETHInterface extends utils.Interface {
  functions: {
    "deposit(bytes32)": FunctionFragment;
    "getMinterAddress()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deposit" | "getMinterAddress"): FunctionFragment;

  encodeFunctionData(functionFragment: "deposit", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "getMinterAddress", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinterAddress", data: BytesLike): Result;

  events: {
    "ReceivedEth(address,uint256,bytes32)": EventFragment;
    "SentEth(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentEth"): EventFragment;
}

export interface ReceivedEthEventObject {
  from: string;
  value: BigNumber;
  principal: string;
}
export type ReceivedEthEvent = TypedEvent<[string, BigNumber, string], ReceivedEthEventObject>;

export type ReceivedEthEventFilter = TypedEventFilter<ReceivedEthEvent>;

export interface SentEthEventObject {
  to: string;
  value: BigNumber;
}
export type SentEthEvent = TypedEvent<[string, BigNumber], SentEthEventObject>;

export type SentEthEventFilter = TypedEventFilter<SentEthEvent>;

export interface CkETH extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CkETHInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      _principal: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getMinterAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  deposit(
    _principal: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getMinterAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deposit(_principal: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    getMinterAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ReceivedEth(address,uint256,bytes32)"(
      from?: PromiseOrValue<string> | null,
      value?: null,
      principal?: PromiseOrValue<BytesLike> | null,
    ): ReceivedEthEventFilter;
    ReceivedEth(
      from?: PromiseOrValue<string> | null,
      value?: null,
      principal?: PromiseOrValue<BytesLike> | null,
    ): ReceivedEthEventFilter;

    "SentEth(address,uint256)"(to?: PromiseOrValue<string> | null, value?: null): SentEthEventFilter;
    SentEth(to?: PromiseOrValue<string> | null, value?: null): SentEthEventFilter;
  };

  estimateGas: {
    deposit(
      _principal: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getMinterAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _principal: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getMinterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
